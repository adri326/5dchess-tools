use chess5dlib::parse::test::read_and_parse;
use chess5dlib::prelude::*;
use std::collections::HashSet;

#[test]
fn test_moveset() {
    let game = read_and_parse("tests/games/standard-d4.json");
    let partial_game = no_partial_game(&game);

    let iter = GenMovesetIter::new(
        vec![game.get_board((0, 1)).unwrap().into()],
        &game,
        &partial_game,
    );

    let moves: HashSet<Move> = game
        .get_board((0, 1))
        .unwrap()
        .generate_moves(&game, &partial_game)
        .unwrap()
        .collect();

    let mut yielded = false;

    for ms in iter.flatten().filter_map(|ms| ms.ok()) {
        yielded = true;
        assert!(
            ms.moves().len() == 1,
            "Expected moveset {:?} to only contain one move",
            ms
        );
        assert!(moves.contains(&ms.moves()[0]), "Expected move {:?} yielded by moveset to also be generated by its corresponding board!", ms.moves()[0]);
    }

    assert!(
        yielded,
        "Expected moveset generator to return at least one moveset!"
    );
}
